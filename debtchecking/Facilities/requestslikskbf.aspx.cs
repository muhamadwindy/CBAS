using DebtChecking.CommonForm;
using DevExpress.Web;
using MWSFramework;
using System;
using System.Collections.Specialized;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;



namespace DebtChecking.Facilities
{
    public partial class requestslikskbf : DataPage
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                initial_reffrential_parameter();

                setMandatory(Session["BranchId"].ToString());

                if (Session["BranchID"] != null)
                    branchid.SelectedValue = Session["BranchID"].ToString();

                if (Request.QueryString["requestid"] != "" || (requestid.Text != "" && requestid.Text != "(autogenerated)"))
                {
                    requestid.Text = Request.QueryString["requestid"];

                    if (requestid.Text.Substring(requestid.Text.Length - 1) == "I")
                    {
                        cust_type.SelectedValue = "IND";
                        iconMandatoryNPWP.Visible = false;
                        tr_gender.Visible = true;
                        tr_mother_name.Visible = true;
                        labelCustomerName.Text = "Customer Name";
                        labelTempatLahir.Text = "Tempat Lahir";
                        labelTanggalLahir.Text = "Tanggal Lahir";
                        tr_PICName.Visible = false;
                        tr_AktaPendirian.Visible = false;
                        tr_ktp.Visible = true;
                        tr_JenisBadanUsaha.Visible = false;
                    }
                    else
                    {
                        cust_type.SelectedValue = "PSH";
                        iconMandatoryNPWP.Visible = true;
                        tr_gender.Visible = false;
                        tr_mother_name.Visible = false;
                        labelCustomerName.Text = "Company Name";
                        labelTempatLahir.Text = "Tempat Pendirian";
                        labelTanggalLahir.Text = "Tanggal Pendirian";
                        tr_PICName.Visible = true;
                        tr_AktaPendirian.Visible = true;
                        tr_ktp.Visible = false;
                        tr_JenisBadanUsaha.Visible = true;

                    }
                    BindGridUploadFoto();
                    retrieve_data();
                    gridbind_suppl();
                    gridbindnotes();
                }
                else
                {
                }
            }
        }

        private void setMandatory(string v)
        {
            String StrValidation = "<Script>";
            if (v != "000")
            {
                StrValidation += @"

                $(document).ready(function () {
                    $('#aspnetForm').validate({
                        rules: {
                            mainPanel$productid: {
                                required: true
                            },
                            mainPanel$branchid: {
                                required: true
                            },
                            mainPanel$purpose: {
                                required: true
                            },
                            mainPanel$cust_name: {
                                required: true
                            },
                            mainPanel$ktp: {
                                required: true,
                                maxlength: 16,
                                minlength: 16
                            },
                            mainPanel$dob: {
                                required: true
                            },
                            mainPanel$cust_type: {
                                required: true
                            },
                            mainPanel$npwp: {
                                required: true
                            },
                            mainPanel$status_bpkb: {
                                required: true
                            },
                            mainPanel$nama_bpkb: {
                                required: true
                            },
                            mainPanel$pob: {
                                required: true
                            },
                            mainPanel$gender: {
                                required: true
                            },
                            mainPanel$mother_name: {
                                required: true
                            },
                            mainPanel$homeaddress: {
                                required: true
                            },
                            mainPanel$phonenumber: {
                                required: true
                            },
                        },
                        messages: {
                            mainPanel$productid: 'Product Harus Diisi',
                            mainPanel$branchid: 'Cabang Harus Diisi',
                            mainPanel$purpose:  'Tujuan SLIK Harus Diisi',
                            mainPanel$cust_name:  'Nama Customer Harus Diisi',
                            mainPanel$dob:  'Tgl Lahir/Pendirian Harus Diisi',
                            mainPanel$ktp: 'Nomor KTP/AKTA Harus Diisi',
                            mainPanel$cust_type:  'Jenis Pelanggan Harus Diisi',
                            mainPanel$npwp: 'NPWP Harus Diisi',
                            mainPanel$status_bpkb: 'Status BPKB Harus Diisi',
                            mainPanel$nama_bpkb: 'Nama BPKB Harus Diisi',
                            mainPanel$pob: 'Tempat Lahir Harus Diisi',
                            mainPanel$gender:  'Jenis Kelamin Harus Diisi',
                            mainPanel$mother_name: 'Nama Ibu Kandung Harus Diisi',
                            mainPanel$homeaddress: 'Alamar Harus Diisi',
                            mainPanel$phonenumber: 'Nomor Telepon Harus Diisi'
                        },
                        errorElement: 'span',
                        errorPlacement: function(error, element) {
                error.addClass('invalid-feedback col-md-4 offset-md-4');
                element.closest('.form-group').append(error);
            },
                        highlight: function(element, errorClass, validClass) {
                            $(element).addClass('is-invalid');
            },
                        unhighlight: function(element, errorClass, validClass) {
                            $(element).removeClass('is-invalid');
            }
        });
});

";
            }
            else
            {
                StrValidation += @"

                $(document).ready(function () {
                    $.validator.setDefaults({
                        submitHandler: function () {
                            //var t = document.getElementById('ctl00_ContentPlaceHolder1_mainPanel_gridPanel_GridFileUpload'); // This have to be the ID of your table, not the tag
                            //var tbody = t.getElementsByTagName('tbody');
                            //var tr = t.getElementsByTagName('tr');
                            //var td = t.getElementsByTagName('td')[0].innerHTML;
                            //if(td == 'No records Found!')
                            //{
                            //    alert('Dokumen Tidak Boleh Kosong');
                            //}else{
                                //var answer = confirm('Submit request!! Pastikan data yang diinput sudah benar??');
                                //if (answer) {
                                //    callback(mainPanel, 'u');
                                //}
                                //else{
                                //    return false;
                                //}
                            //}
                        }
                    });
                    $('#aspnetForm').validate({
                        rules: {
                            mainPanel$productid: {
                                required: true
                            },
                            mainPanel$branchid: {
                                required: true
                            },
                            mainPanel$purpose: {
                                required: true
                            },
                            mainPanel$cust_name: {
                                required: true
                            },
                            mainPanel$dob: {
                                required: true
                            },
                            mainPanel$cust_type: {
                                required: true
                            },
                            mainPanel$ktp: {
                                required: true,
                                maxlength: 16,
                                minlength: 16
                            },
                            mainPanel$npwp: {
                                required: true
                            },
                            mainPanel$pob: {
                                required: true
                            },
                        },
                        messages: {
                            mainPanel$productid: 'Product Harus Diisi',
                            mainPanel$branchid: 'Cabang Harus Diisi',
                            mainPanel$purpose:  'Tujuan SLIK Harus Diisi',
                            mainPanel$cust_name:  'Nama Customer Harus Diisi',
                            mainPanel$dob:  'Tgl Lahir/Pendirian Harus Diisi',
                            mainPanel$ktp: 'Nomor KTP/AKTA Harus Diisi',
                            mainPanel$cust_type:  'Jenis Pelanggan Harus Diisi',
                            mainPanel$npwp: 'NPWP Harus Diisi',
                            mainPanel$status_bpkb: 'Status BPKB Harus Diisi',
                            mainPanel$nama_bpkb: 'Nama BPKB Harus Diisi',
                            mainPanel$pob: 'Tempat Lahir Harus Diisi',
                            mainPanel$gender:  'Jenis Kelamin Harus Diisi',
                            mainPanel$mother_name: 'Nama Ibu Kandung Harus Diisi',
                            mainPanel$homeaddress: 'Alamar Harus Diisi',
                            mainPanel$phonenumber: 'Nomor Telepon Harus Diisi'
                        },
                        errorElement: 'span',
                        errorPlacement: function(error, element) {
                error.addClass('invalid-feedback col-md-4 offset-md-4');
                element.closest('.form-group').append(error);
            },
                        highlight: function(element, errorClass, validClass) {
                            $(element).addClass('is-invalid');
            },
                        unhighlight: function(element, errorClass, validClass) {
                            $(element).removeClass('is-invalid');
            }
        });
                });

";
            }

            StrValidation += "</Script>";

            Page.ClientScript.RegisterStartupScript(
                this.GetType(), "myscriptValidation", StrValidation);
        }

        #region Additional Function

        private DataSet ds = null;

        public string FormatedValue(object value)
        {
            string FormatType = null;
            if (value is Int32 || value is Int64 || value is float || value is double || value is decimal)
                FormatType = "n0";
            if (value is DateTime)
                FormatType = "dd MMM yyyy HH:mm:ss";
            return FormatedValue(value, FormatType);
        }

        public string FormatedValue(object value, string FormatType)
        {
            if (value == DBNull.Value)
                value = "";
            if (FormatType != null)
            {
                if (value is Int32)
                    value = ((Int32)value).ToString(FormatType);
                else if (value is Int64)
                    value = ((Int64)value).ToString(FormatType);
                else if (value is float)
                    value = ((float)value).ToString(FormatType);
                else if (value is double)
                    value = ((double)value).ToString(FormatType);
                else if (value is decimal)
                    value = ((decimal)value).ToString(FormatType);
                else if (value is DateTime)
                    value = ((DateTime)value).ToString(FormatType);
            }
            return value.ToString();
        }

        public string DS(int tbl, string FieldName)
        {
            try
            {
                object value = ds.Tables[tbl].Rows[0][FieldName];
                return FormatedValue(value);
            }
            catch
            {
                return "";
            }
        }

        public string DS(int tbl, string FieldName, string FormatType)
        {
            try
            {
                if (ds.Tables[tbl].Rows.Count == 0)
                    return "";
                object value = ds.Tables[tbl].Rows[0][FieldName];
                return FormatedValue(value, FormatType);
            }
            catch
            {
                return "";
            }
        }

        public string DS_SUM(int tbl, string FieldName, string sumtype)
        {
            return DS_SUM(tbl, FieldName, sumtype, null);
        }

        public string DS_SUM(int tbl, string FieldName, string sumtype, string FormatType)
        {
            DataTable dt = ds.Tables[tbl];

            double value = 0;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                switch (sumtype)
                {
                    case "SUM":
                        if (dt.Rows[i][FieldName] != DBNull.Value)
                            value += double.Parse(dt.Rows[i][FieldName].ToString());
                        break;

                    case "CNT":
                        value += 1;
                        break;

                    case "AVG":
                        if (dt.Rows[i][FieldName] != DBNull.Value)
                            value += Convert.ToSingle(dt.Rows[i][FieldName]);
                        break;
                }
            }
            if (sumtype == "AVG" && value != 0)
                value = value / dt.Rows.Count;

            if (value != 0)
            {
                if (FormatType == null)
                    return FormatedValue(value);
                else
                    return FormatedValue(value, FormatType);
            }
            else return "";
        }

        #endregion Additional Function

        #region retreive & save

        protected void initial_reffrential_parameter()
        {
            object[] param = new object[] { "tujuanbic", "branchid:" + Session["BranchID"].ToString() };
            staticFramework.reff(purpose, "exec sp_get_reff @1, @2", param, conn);
            staticFramework.reff(branchid, "select * FROM rfbranch", null, conn);
            staticFramework.reff(productid, "select * FROM rfproduct", null, conn);
            staticFramework.reff(status_app, "select * FROM rfrelationbic", null, conn);
            staticFramework.reff(DOC_CODE, "select * from RFDOCUMENT where ACTIVE = 1  ", null, conn);

            DOC_CODE.Items.Remove("(none)");
            DOC_CODE.DataBind();

            staticFramework.reff(SalesPerson, "select SalesId, SalesName FROM RfSalesPerson where Active = 1", null, conn);
            staticFramework.reff(Brand, "select BrandId, BrandName from dbo.rfbrandmanufacturer where Active = 1", null, conn);
            staticFramework.reff(VehicleYear, "select VehicleYearCode, VehicleYear from dbo.RfVehicleYear where Active = 1", null, conn);
            staticFramework.reff(LoanTerm, "select Tenor, Tenor from dbo.RfTenor", null, conn);
            staticFramework.reff(JenisBadanUsaha, "select Code, Deskripsi from RFJenisBadanUsaha order by position", null, conn);
            staticFramework.reff(Classification, "select ClassificationId, ClassificationName from RFCLASSIFICATION", null, conn);

            string productId = productid.SelectedValue;
            string vehicleYear = VehicleYear.SelectedValue;
            staticFramework.reff(NoOfUnit, "exec dbo.UspNoOfUnit", new object[] { productId, vehicleYear }, conn);
        }

        private void retreive_schema()
        {
            DataTable dt = conn.GetDataTable("select top 0 * from apprequest", null, dbtimeout);
            staticFramework.retrieveschema(dt, productid);
            staticFramework.retrieveschema(dt, purpose);
            staticFramework.retrieveschema(dt, branchid);
            staticFramework.retrieveschema(dt, cust_name);
            staticFramework.retrieveschema(dt, ktp);
            staticFramework.retrieveschema(dt, pob);
            staticFramework.retrieveschema(dt, npwp);
            staticFramework.retrieveschema(dt, homeaddress);
            staticFramework.retrieveschema(dt, phonenumber);
            staticFramework.retrieveschema(dt, mother_name);
        }

        private void retrieve_data()
        {
            DataTable dt = conn.GetDataTable("select * from apprequest where requestid = @1",
                new object[] { Request.QueryString["requestid"] }, dbtimeout);
            if (Request.QueryString["mode"].ToString() == "edit")
            {
                staticFramework.retrieve(dt, requestid);
            }
            staticFramework.retrieve(dt, productid);

            string queryDealer = "Select DealerCode, DealerName from dbo.RfDealer where Active = 1";
            if (productid.SelectedItem.Text.ToLower().Contains("used pv"))
            {
                queryDealer += " and DealerName like '%used car%'";
            }
            staticFramework.reff(DealerCode, queryDealer, null, conn);

            staticFramework.retrieve(dt, purpose);
            if (Request.QueryString["mode"].ToString() == "edit")
            {
                staticFramework.retrieve(dt, branchid);
            }
            staticFramework.retrieve(dt, cust_type);
            staticFramework.retrieve(dt, cust_name);
            staticFramework.retrieve(dt, dob);
            staticFramework.retrieve(dt, ktp);
            staticFramework.retrieve(dt, pob);
            staticFramework.retrieve(dt, npwp);
            staticFramework.retrieve(dt, homeaddress);
            staticFramework.retrieve(dt, phonenumber);
            staticFramework.retrieve(dt, gender);
            staticFramework.retrieve(dt, mother_name);
            staticFramework.retrieve(dt, PICName);
            staticFramework.retrieve(dt, JenisIdentitas);
            staticFramework.retrieve(dt, JenisBadanUsaha);
            staticFramework.retrieve(dt, ktp);
            staticFramework.retrieve(dt, AktaPendirian);
            //staticFramework.retrieve(dt, status_bpkb);
            //staticFramework.retrieve(dt, nama_bpkb);
            //string linkPhoto = Server.MapPath(dt.Rows[0]["photo"].ToString());
            //dataPhoto.Value = dt != null && dt.Rows.Count > 0 && dt.Rows[0]["photo"].ToString() != "" ? Convert.ToBase64String(File.ReadAllBytes(Server.MapPath(dt.Rows[0]["photo"].ToString()))) : "";

            #region Info Produk

            DataTable dtLoan = conn.GetDataTable("select * from dbo.AppLoanInfo where RequestId=@1",
                new object[] { Request.QueryString["requestid"] }, dbtimeout);
            staticFramework.retrieve(dtLoan, DealerCode);
            staticFramework.retrieve(dtLoan, "DealerCode", h_DealerCode);
            staticFramework.retrieve(dtLoan, "SalesId", SalesPerson);
            staticFramework.retrieve(dtLoan, "SalesId", h_SalesPerson);
            staticFramework.retrieve(dtLoan, "BrandId", Brand);
            staticFramework.retrieve(dtLoan, "BrandId", h_Brand);


            object[] par = new object[] { h_Brand.Value };
            staticFramework.reff(Model, "select ModelId as DATA_CODE, ModelName AS DATA_DESC from dbo.RfModel m where m.BrandId = @1 and Active = 1", par, conn);
            loadTenor();

            staticFramework.retrieve(dtLoan, "ModelId", Model);
            staticFramework.retrieve(dtLoan, "ModelId", h_Model);

            staticFramework.reff(Varian, "select VarianId, VarianName from dbo.RfVarian where ModelId = @1 and Active = 1", new object[] { h_Model.Value }, conn);

            staticFramework.retrieve(dtLoan, "VarianId", Varian);
            staticFramework.retrieve(dtLoan, "VarianId", h_Varian);
            setClassification(); 

            staticFramework.retrieve(dtLoan, "VehicleYearCode", VehicleYear);
            staticFramework.retrieve(dtLoan, "VehicleYearCode", h_VehicleYear);
            staticFramework.retrieve(dtLoan, "NoOfUnitId", NoOfUnit);
            staticFramework.retrieve(dtLoan, "NoOfUnitId", h_NoOfUnit);
            staticFramework.retrieve(dtLoan, "Otr", OTR);
            staticFramework.retrieve(dtLoan, "DP", DP);
            loadTenor();
            staticFramework.retrieve(dtLoan, LoanTerm);
            staticFramework.retrieve(dtLoan, "LoanTerm", h_LoanTerm);
            staticFramework.retrieve(dtLoan, "InterestRate", InterestRate);
            #endregion

        }

        private void retrieve_data_suppl(string key)
        {
            DataTable dt = conn.GetDataTable("select * from apprequestsupp where requestid = @1 and seq = @2",
                new object[] { Request.QueryString["requestid"], key }, dbtimeout);
            staticFramework.retrieve(dt, seq);
            staticFramework.retrieve(dt, supp_cust_type, "supp_");
            staticFramework.retrieve(dt, supp_cust_name, "supp_");
            staticFramework.retrieve(dt, status_app);
            staticFramework.retrieve(dt, supp_dob, "supp_");
            staticFramework.retrieve(dt, supp_ktp, "supp_");
            staticFramework.retrieve(dt, supp_pob, "supp_");
            staticFramework.retrieve(dt, supp_npwp, "supp_");
            staticFramework.retrieve(dt, supp_homeaddress, "supp_");
            staticFramework.retrieve(dt, supp_phonenumber, "supp_");
            staticFramework.retrieve(dt, supp_gender, "supp_");
            staticFramework.retrieve(dt, supp_mother_name, "supp_");

            if (supp_cust_type.SelectedValue == "PSH")
            {
                tr_supp_gender.Style["display"] = "none";
                tr_supp_mother_name.Style["display"] = "none";
                supp_npwp.CssClass = "form-control mandatory";
                supp_gender.CssClass = "form-control border-0 text-sm";
                tr_supp_ktp.Style["display"] = "none";
            }
            else
            {
                tr_supp_gender.Style["display"] = "";
                tr_supp_mother_name.Style["display"] = "";
                supp_npwp.CssClass = "form-control";
                supp_gender.CssClass = "form-control border-0 text-sm mandatory";
            }
        }

        private void gridbind_suppl()
        {
            string query = "Exec dbo.UspSlikTambahan @1";
            DataTable dt = conn.GetDataTable(query, new object[] { Request.QueryString["requestid"] }, dbtimeout);
            GridViewSuppl.DataSource = dt;
            GridViewSuppl.DataBind();
        }

        private void savedata()
        {
            if (cust_type.SelectedValue == "PSH")
            {
                gender.Items[0].Selected = false;
                gender.Items[1].Selected = false;
                gender.CssClass = "form-control mandatory";
                mother_name.Text = "";
            }

            NameValueCollection Keys = new NameValueCollection();
            NameValueCollection Fields = new NameValueCollection();
            if (Request.QueryString["mode"] == "new")
            {
                Fields["inputdate"] = "getdate()";
                staticFramework.saveNVC(Fields, "inputby", USERID);
                staticFramework.saveNVC(Fields, "reqstatus", "DRF");
            }
            staticFramework.saveNVC(Keys, requestid);
            staticFramework.saveNVC(Fields, productid);
            staticFramework.saveNVC(Fields, purpose);
            staticFramework.saveNVC(Fields, branchid);
            staticFramework.saveNVC(Fields, cust_type);
            staticFramework.saveNVC(Fields, NoAplikasi);
            staticFramework.saveNVC(Fields, cust_name);
            staticFramework.saveNVC(Fields, dob);
            staticFramework.saveNVC(Fields, "ktp", (cust_type.SelectedValue == "PSH" ? npwp.Text : ktp.Text));
            staticFramework.saveNVC(Fields, AktaPendirian);
            staticFramework.saveNVC(Fields, pob);
            staticFramework.saveNVC(Fields, npwp);
            staticFramework.saveNVC(Fields, homeaddress);
            staticFramework.saveNVC(Fields, phonenumber);
            staticFramework.saveNVC(Fields, gender);
            staticFramework.saveNVC(Fields, mother_name);
            staticFramework.saveNVC(Fields, PICName);
            staticFramework.saveNVC(Fields, JenisIdentitas);
            staticFramework.saveNVC(Fields, JenisBadanUsaha);
            //staticFramework.saveNVC(Fields, status_bpkb);
            //staticFramework.saveNVC(Fields, nama_bpkb);

            //if (dataPhoto.Value != "")
            //{
            //    Byte[] photo = Convert.FromBase64String(dataPhoto.Value);
            //    string filePhotoName = Path.Combine("~/Upload/Foto/", "Photo_" + DateTime.Now.ToString("ddMMyyHHmmss")) + ".jpg";
            //    staticFramework.saveNVC(Fields, "photo", filePhotoName);
            //    File.WriteAllBytes(Server.MapPath(filePhotoName), photo);
            //}
            staticFramework.save(Fields, Keys, "apprequest", conn);


            Keys = new NameValueCollection();
            Fields = new NameValueCollection();
            staticFramework.saveNVC(Keys, "requestid", requestid);
            staticFramework.saveNVC(Fields, "ProductId", productid);
            staticFramework.saveNVC(Fields, "DealerCode", h_DealerCode.Value);
            staticFramework.saveNVC(Fields, "SalesId", h_SalesPerson.Value);
            staticFramework.saveNVC(Fields, "BrandId", h_Brand.Value);
            staticFramework.saveNVC(Fields, "ModelId", h_Model.Value);
            staticFramework.saveNVC(Fields, "VarianId", h_Varian.Value);
            staticFramework.saveNVC(Fields, "VehicleYearCode", h_VehicleYear.Value);
            staticFramework.saveNVC(Fields, "NoOfUnitId", h_NoOfUnit.Value);
            staticFramework.saveNVC(Fields, "Otr", OTR);
            staticFramework.saveNVC(Fields, "Dp", DP.Text);
            staticFramework.saveNVC(Fields, "LoanTerm", h_LoanTerm.Value);
            staticFramework.saveNVC(Fields, "InterestRate", InterestRate);
            staticFramework.save(Fields, Keys, "AppLoanInfo", conn);
        }

        protected void Upload_FileUploadComplete(object sender, FileUploadCompleteEventArgs e)
        {
            e.CallbackData = Convert.ToBase64String(e.UploadedFile.FileBytes);
        }

        private void savedata_suppl()
        {
            if (supp_cust_type.SelectedValue == "PSH")
            {
                supp_gender.Items[0].Selected = false;
                supp_gender.Items[1].Selected = false;
                supp_gender.CssClass = "form-control mandatory";
                supp_mother_name.Text = "";
            }

            NameValueCollection Keys = new NameValueCollection();
            NameValueCollection Fields = new NameValueCollection();
            staticFramework.saveNVC(Keys, requestid);
            staticFramework.saveNVC(Keys, seq);
            staticFramework.saveNVC(Fields, supp_cust_type, "supp_");
            staticFramework.saveNVC(Fields, supp_cust_name, "supp_");
            staticFramework.saveNVC(Fields, status_app);
            staticFramework.saveNVC(Fields, supp_dob, "supp_");
            staticFramework.saveNVC(Fields, supp_JenisIdentitas, "supp_");
            staticFramework.saveNVC(Fields, supp_ktp, "supp_");
            staticFramework.saveNVC(Fields, supp_pob, "supp_");
            staticFramework.saveNVC(Fields, supp_npwp, "supp_");
            staticFramework.saveNVC(Fields, supp_homeaddress, "supp_");
            staticFramework.saveNVC(Fields, supp_phonenumber, "supp_");
            staticFramework.saveNVC(Fields, supp_gender, "supp_");
            staticFramework.saveNVC(Fields, supp_mother_name, "supp_");

            if (seq.Value != "")
                staticFramework.save(Fields, Keys, "apprequestsupp", conn);
            else
            {
                staticFramework.save(Fields, Keys, "apprequestsupp",
                    "DECLARE @seq INT \n" +
                    "SELECT @seq=ISNULL(MAX(seq),0)+1 FROM apprequestsupp " +
                    "WHERE requestid='" + requestid.Text + "' \n", conn);
            }
        }

        protected void delete_suppl(string key)
        {
            object[] param = new object[] { requestid.Text, key };
            conn.ExecNonQuery("DELETE FROM apprequestsupp WHERE requestid=@1 AND seq=@2", param, dbtimeout);
        }

        protected void gridbindnotes()
        {
            DataTable dt = conn.GetDataTable("select * from vw_apprequesttrack where requestid = @1 order by seq desc",
                new object[] { Request.QueryString["requestid"] }, dbtimeout);
            if (dt.Rows.Count > 0)
            {
                GRID_NOTES.DataSource = dt;
                GRID_NOTES.DataBind();
                tbl_history.Style.Remove("display");
            }
        }

        #endregion retreive & save

        private void BindGridUploadFoto()
        {
            object[] par = new object[] { Request.QueryString["requestid"], USERID };

            DataTable dt = conn.GetDataTable("EXEC SP_VW_APP_UPLOAD_DOC @1,@2 ", par, dbtimeout);
            DataView dv = new DataView(dt);

            if (Request.QueryString["requestid"] != null && Request.QueryString["requestid"].ToString().Contains("FMF"))
            {
                //dv.RowFilter = "DOC_OTHER = '" + Request.QueryString["data"].ToString() + "'";
            }

            GridFileUpload.DataSource = dv;
            GridFileUpload.DataBind();
        }

        protected void ASPxUploadControl1_FileUploadComplete(object sender, FileUploadCompleteEventArgs e)
        {
            try
            {
                //check new file upload
                string fileName = e.UploadedFile.FileName;
                if (!(fileName != ""))
                    return;

                string regno = Request.QueryString["REQUESTID"];
                string docid = h_DOC_ID.Value;
                string doccode = h_DOC_CODE.Value == "" ? DOC_CODE.SelectedValue : h_DOC_CODE.Value;

                //delete file on storage first
                if (docid.Length > 0)
                {
                    object[] par = new object[] { Request.QueryString["requestid"], docid };

                    DataTable dtExists = conn.GetDataTable("select top 1 DIRECTORY from VW_APP_UPLOAD_DOC where REQUESTID = @1 and DOC_ID = @2 ", par, dbtimeout);

                    string fullpathExists = "";

                    if (dtExists.Rows.Count > 0)
                    {
                        fullpathExists = dtExists.Rows[0][0].ToString();
                    }

                    string pathExists = Server.MapPath(fullpathExists);
                    FileInfo fileExists = new FileInfo(pathExists);
                    if (fileExists.Exists)//check file exsit or not
                    {
                        fileExists.Delete();
                    }
                }

                //----save to storage first

                string contentType = e.UploadedFile.ContentType;
                byte[] fileBytes = e.UploadedFile.FileBytes;
                string folder = "Foto";

                string ext = System.IO.Path.GetExtension(e.UploadedFile.FileName);

                object[] parFolder = new object[] { doccode };
                conn.ExecReader("exec SP_GET_FOLDER @1", parFolder, dbtimeout);

                if (conn.hasRow())
                {
                    folder = conn.GetFieldValue("FOLDER");
                }

                string uniqueFilename = DateTime.Now.ToString("yyyyMMddHHmmss") + "_" + Request.QueryString["REQUESTID"] + "_" + fileName.Replace(" ", "_");
                string path = "../upload/files/" + folder + "/" + Request.QueryString["REQUESTID"] + "/";
                string fullpath = path + uniqueFilename;

                if (!Directory.Exists(Server.MapPath(path)))
                    Directory.CreateDirectory(Server.MapPath(path));
                using (FileStream fileStream = new FileStream(Server.MapPath(path) + uniqueFilename, FileMode.Create, FileAccess.Write))
                    fileStream.Write(fileBytes, 0, fileBytes.Length);

                //----save to db----------------------------------------------------------------------------------------------

                using (SqlConnection sqlConnection = new SqlConnection((string)Session["ConnString"]))
                {
                    string cmdText = "DELETE FROM APP_UPLOAD_DOC WHERE REQUESTID = @REQUESTID AND DOC_ID = @ID INSERT INTO APP_UPLOAD_DOC VALUES (@REQUESTID, @ID, @CODE, @NAME, @TYPE, null, @BY, @DATE, @DOCOTHER, @DIRECTORY,null,null,null)";

                    using (SqlCommand sqlCommand = new SqlCommand(cmdText))
                    {
                        sqlCommand.Connection = sqlConnection;
                        sqlCommand.Parameters.AddWithValue("@REQUESTID", regno);

                        //if (Request.QueryString["REQUESTID"] != null && Request.QueryString["REQUESTID"].ToString().Contains("FMF"))
                        //{
                        //    DOC_OTHER.Text = Request.QueryString["data"].ToString();
                        //}

                        if (docid.Length > 0)
                        {
                            sqlCommand.Parameters.AddWithValue("@ID", docid);
                        }
                        else
                        {
                            sqlCommand.Parameters.AddWithValue("@ID", Guid.NewGuid());
                        }

                        sqlCommand.Parameters.AddWithValue("@CODE", doccode);
                        sqlCommand.Parameters.AddWithValue("@NAME", fileName);
                        sqlCommand.Parameters.AddWithValue("@TYPE", contentType);
                        sqlCommand.Parameters.AddWithValue("@BY", USERID);
                        sqlCommand.Parameters.AddWithValue("@DATE", DateTime.Now);
                        sqlCommand.Parameters.AddWithValue("@DOCOTHER", DOC_OTHER.Text);
                        sqlCommand.Parameters.AddWithValue("@DIRECTORY", fullpath);
                        sqlConnection.Open();
                        sqlCommand.ExecuteNonQuery();
                    }
                }
                e.CallbackData = "";
            }
            catch (Exception ex)
            {
                gridPanel.JSProperties["cp_alert"] = ex.Message.IndexOf("Last Query:") <= 0 ? ex.Message : ex.Message.Substring(0, ex.Message.IndexOf("Last Query:"));
            }
        }

        protected void DownloadFile(string id)
        {
            try
            {
                string directory = "";

                object[] par = new object[] { Request.QueryString["REQUESTID"], id };

                conn.ExecReader("SELECT * FROM VW_APP_UPLOAD_DOC WHERE REQUESTID = @1 AND DOC_ID = @2", par, dbtimeout);

                if (conn.hasRow())
                {
                    directory = conn.GetFieldValue("DIRECTORY");
                }

                gridPanel.JSProperties["cp_url"] = directory;
            }
            catch (Exception ex)
            {
                gridPanel.JSProperties["cp_alert"] = ex.Message.IndexOf("Last Query:") <= 0 ? ex.Message : ex.Message.Substring(0, ex.Message.IndexOf("Last Query:"));
            }
        }

        protected void DeleteFile(string id)
        {
            try
            {
                object[] par = new object[] { Request.QueryString["REQUESTID"], id };
                DataTable dtCheck = conn.GetDataTable("select '1' AllowDelete ,'' DeleteMessage ", par, dbtimeout);

                if (dtCheck.Rows.Count > 0)
                {
                    if (dtCheck.Rows[0][0].ToString() == "1")
                    {
                        //delete file on storage first
                        DataTable dt = conn.GetDataTable("select top 1 DIRECTORY from VW_APP_UPLOAD_DOC where REQUESTID = @1 and DOC_ID = @2 ", par, dbtimeout);

                        string fullpath = "";

                        if (dt.Rows.Count > 0)
                        {
                            fullpath = dt.Rows[0][0].ToString();
                        }

                        string path = Server.MapPath(fullpath);
                        FileInfo file = new FileInfo(path);
                        if (file.Exists)//check file exsit or not
                        {
                            file.Delete();
                        }

                        //delete record on db
                        conn.ExecNonQuery("DELETE FROM APP_UPLOAD_DOC WHERE REQUESTID = @1 AND DOC_ID = @2 ", par, dbtimeout);

                        gridPanel.JSProperties["cp_alert"] = "Hapus File Berhasil";
                    }
                    else
                    {
                        gridPanel.JSProperties["cp_alert"] = dtCheck.Rows[0][1].ToString();
                    }
                }
                else
                {
                    gridPanel.JSProperties["cp_alert"] = "Hapus File Gagal";
                }
            }
            catch (Exception ex)
            {
                gridPanel.JSProperties["cp_alert"] = ex.Message.IndexOf("Last Query:") <= 0 ? ex.Message : ex.Message.Substring(0, ex.Message.IndexOf("Last Query:"));
            }
        }

        protected void GridFileUpload_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            GridFileUpload.PageIndex = e.NewPageIndex;
        }

        protected void GridFileUpload_PageIndexChanged(object sender, EventArgs e)
        {
            BindGridUploadFoto();
            gridbind_suppl();
            gridbindnotes();
        }

        protected void GridFileUpload_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType != DataControlRowType.DataRow)
                return;

            DataRowView dataItem = (DataRowView)e.Row.DataItem;

            HtmlAnchor lnkUpload = (HtmlAnchor)e.Row.FindControl("lnkUpload");
            if (lnkUpload.Attributes["data-allowupload"].ToLower() == "true")
            {
                lnkUpload.Visible = true;
            }
            else
            {
                lnkUpload.Visible = false;
            }

            HtmlAnchor lnkDownload = (HtmlAnchor)e.Row.FindControl("lnkDownload");
            if (string.IsNullOrEmpty(lnkDownload.Attributes["data-uploadby"]))
            {
                lnkDownload.Visible = false;
            }
            else
            {
                lnkDownload.Visible = true;
            }

            HtmlAnchor lnkDelete = (HtmlAnchor)e.Row.FindControl("lnkDelete");

            if (lnkDelete.Attributes["data-allowdelete"].ToLower() == "true")
            {
                lnkDelete.Visible = true;
            }
            else
            {
                lnkDelete.Visible = false;
            }

            HtmlInputCheckBox cbUploaded = (HtmlInputCheckBox)e.Row.FindControl("cbUPLOADED");
            cbUploaded.Disabled = true;

            if (cbUploaded.Attributes["data-uploaded"].ToLower() == "true")
            {
                cbUploaded.Checked = true;
            }
            else
            {
                cbUploaded.Checked = false;
            }
        }

        protected void gridPanel_Callback(object source, CallbackEventArgsBase e)
        {
            if (e.Parameter.ToString().StartsWith("r:"))
                DownloadFile(e.Parameter.Substring(2));
            else if (e.Parameter.ToString().StartsWith("d:"))
                DeleteFile(e.Parameter.Substring(2));
            else if (e.Parameter.ToString().StartsWith("u:"))
                gridPanel.JSProperties["cp_new"] = e.Parameter.Substring(2);
            BindGridUploadFoto();

            gridbind_suppl();
            gridbindnotes();
        }

        #region callback

        protected void mainPanel_Callback(object source, CallbackEventArgsBase e)
        {
            try
            {
                if (e.Parameter.Contains("rfoto"))
                {
                    object[] par = new object[] { cust_type.SelectedValue };
                    staticFramework.reff(DOC_CODE, "select * from RFDOCUMENT where ACTIVE = 1  and DOC_GROUP = @1 ", par, conn);
                    DOC_CODE.Items.Remove("(none)");
                    DOC_CODE.DataBind();

                    string data = e.Parameter;

                    string[] parameter = data.Split(':');
                    string docid = parameter[1].Replace("undefined", "");
                    string doccode = parameter[2].Replace("undefined", "");
                    string notes = parameter[3].Replace("undefined", "");
                    string divdoc = parameter[4].Replace("undefined", "");

                    h_DOC_CODE.Value = "";

                    if (doccode != "")
                    {
                        try
                        {
                            if (doccode != null)
                            {
                                DOC_CODE.Items.FindByValue(doccode).Selected = true;
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        DOC_CODE.Enabled = false;
                    }
                    else
                    {
                        DOC_CODE.Enabled = true;
                    }

                    h_DOC_ID.Value = docid;
                    h_DOC_CODE.Value = doccode;

                    if (doccode != "")
                        DOC_CODE.SelectedValue = doccode;
                    DOC_OTHER.Text = notes;

                    //if (doccode == "99")
                    //{
                    //    div.style.display = 'block';
                    //}
                    //else
                    //{
                    //    div.style.display = 'none';
                    //}
                }
                else if (e.Parameter == "s")
                {
                    try
                    {
                        string isValidApp = validateSubmitAndSaveApp();
                        if (isValidApp != "")
                        {
                            mainPanel.JSProperties["cp_alert"] = isValidApp;
                            return;
                        }
                        savedata();

                        mainPanel.JSProperties["cp_alert"] = "Data permintaan SLIK checking berhasil disimpan.";
                        //mainPanel.JSProperties["cp_target"] = "_parent";
                        //mainPanel.JSProperties["cp_redirect"] = "../ScreenMenu.aspx?sm=BIC|REQ&passurl&mntitle=Request SLIK Checking&li=L|BIC|REQ";

                        mainPanel.JSProperties["cp_target"] = "mainframex";
                        mainPanel.JSProperties["cp_redirect"] = Request.Url.AbsoluteUri.Replace("mode=new", "mode=edit");
                        //}
                        //else
                        //{
                        //    mainPanel.JSProperties["cp_alert"] = "User " + USERID + " tidak mempunyai akses untuk input produk " + productid.SelectedItem.Text;
                        //}
                    }
                    catch (Exception ex)
                    {
                        string errmsg = ex.Message;
                        if (errmsg.IndexOf("Last Query") > 0)
                            errmsg = errmsg.Substring(0, errmsg.IndexOf("Last Query"));
                        mainPanel.JSProperties["cp_alert"] = errmsg;
                    }
                }
                else if (e.Parameter == "d")
                {
                    object[] param = new object[] { Request.QueryString["requestid"] };
                    conn.ExecNonQuery("DELETE FROM apprequestsupp WHERE requestid=@1", param, dbtimeout);
                    conn.ExecNonQuery("DELETE FROM apprequest WHERE requestid=@1", param, dbtimeout);

                    //delete file on storage first
                    DataTable dt = conn.GetDataTable("select top 1 DIRECTORY from VW_APP_UPLOAD_DOC where REQUESTID = @1 ", param, dbtimeout);

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string fullpath = "";
                        fullpath = dt.Rows[i][0].ToString();
                        string path = Server.MapPath(fullpath);
                        FileInfo file = new FileInfo(path);
                        if (file.Exists)//check file exsit or not
                        {
                            file.Delete();
                        }
                    }

                    //delete record on db
                    conn.ExecNonQuery("DELETE FROM APP_UPLOAD_DOC WHERE REQUESTID = @1 ", param, dbtimeout);

                    mainPanel.JSProperties["cp_alert"] = "Data permintaan SLIK checking berhasil dihapus.";
                    mainPanel.JSProperties["cp_target"] = "mainframex"; 
                    mainPanel.JSProperties["cp_redirect"] = "../ScreenMenu.aspx?sm=BIC|REQ&passurl&mntitle=Request SLIK Checking&li=L|BIC|REQ";

                    return;
                }
                else if (e.Parameter == "submit")
                {

                    string isValid = validateSubmitAndSaveApp();
                    if (isValid != "")
                    {
                        mainPanel.JSProperties["cp_alert"] = IsValid;
                        return;
                    }
                    savedata();
                    object[] parVal = new object[] { requestid.Text, USERID };
                    DataTable dataValidasi = conn.GetDataTable("exec sp_validasi_request @1, @2", parVal, dbtimeout);

                    if (dataValidasi.Rows.Count > 0)
                    {
                        if (dataValidasi.Rows[0]["valid"].ToString() == "1")
                        {
                            string sqlAudit = "select * from dbo.apprequest where requestid = @1";
                            object[] parAudit = new object[] { requestid.Text };
                            DataTable dtAppRequestBefore = conn.GetDataTable(sqlAudit, parAudit, dbtimeout);

                            string sql = "exec sp_update_request @1,@2,@3,@4,@5,@6";

                            object[] param = new object[] { requestid.Text, "DRF", "APV", "SBT", USERID, null };
                            conn.ExecNonQuery(sql, param, dbtimeout);
                            NameValueCollection Keys = new NameValueCollection();
                            NameValueCollection Fields = new NameValueCollection();
                            Fields["reqdate"] = "getdate()";
                            staticFramework.saveNVC(Keys, requestid);
                            staticFramework.save(Fields, Keys, "apprequest", conn);
                             
                            DataTable dtAppRequestAfter = conn.GetDataTable(sqlAudit, parAudit, dbtimeout);
                            CommonClass cm = new CommonClass();

                            cm.InsertAuditTrail("apprequest", null, USERID, dtAppRequestBefore, dtAppRequestAfter);





                            mainPanel.JSProperties["cp_alert"] = "Data permintaan SLIK checking berhasil disubmit.";
                            mainPanel.JSProperties["cp_target"] = "mainFramex";                            
                            mainPanel.JSProperties["cp_redirect"] = "../ScreenMenu.aspx?sm=BIC|REQ&passurl&mntitle=Request SLIK Checking&li=L|BIC|REQ";
                        }
                        else
                        {
                            mainPanel.JSProperties["cp_alert"] = dataValidasi.Rows[0]["message"].ToString();
                            return;
                        }
                    }
                    else
                    {
                        mainPanel.JSProperties["cp_alert"] = "Submit Request Gagal";
                        return;
                    }
                    //}
                    //else
                    //{
                    //    mainPanel.JSProperties["cp_alert"] = "User " + USERID + " tidak mempunyai akses untuk input produk " + productid.SelectedItem.Text;
                    //}
                }
                else if (e.Parameter.StartsWith("g:"))
                {
                    string key = e.Parameter.Substring(2);
                    conn.ExecReader("select * from vw_apprequest_all where requestid = @1", new object[] { key }, dbtimeout);
                    if (conn.hasRow())
                    {
                        cust_name.Text = conn.GetFieldValue("cust_name");
                        ktp.Text = conn.GetFieldValue("ktp");
                        npwp.Text = conn.GetFieldValue("npwp");
                        cust_type.SelectedValue = conn.GetFieldValue("cust_type");
                        pob.Text = conn.GetFieldValue("pob");
                        homeaddress.Text = conn.GetFieldValue("homeaddress");
                        phonenumber.Text = conn.GetFieldValue("phonenumber");
                        dob.Text = conn.GetFieldValue("dob");
                        gender.SelectedValue = conn.GetFieldValue("gender");
                        mother_name.Text = conn.GetFieldValue("mother_name");
                    }
                }
                else if (e.Parameter.StartsWith("gp:"))
                {
                    string key = e.Parameter.Substring(3);
                    DataTable dt = conn.GetDataTable("select * from apprequestsupp where requestid = @1 and seq= @2", new object[] { requestid.Text, key }, dbtimeout);
                    if (dt != null & dt.Rows.Count > 0)
                    {
                        seq.Value = dt.Rows[0]["seq"].ToString();
                        supp_cust_name.Text = dt.Rows[0]["cust_name"].ToString();
                        try
                        {
                            supp_JenisIdentitas.SelectedValue = dt.Rows[0]["JenisIdentitas"].ToString();
                            supp_JenisIdentitas.DataBind();
                        }
                        catch (Exception)
                        {
                        }
                        supp_ktp.Text = dt.Rows[0]["ktp"].ToString();
                        supp_npwp.Text = dt.Rows[0]["npwp"].ToString();
                        supp_cust_type.SelectedValue = dt.Rows[0]["cust_type"].ToString();
                        status_app.SelectedValue = dt.Rows[0]["status_app"].ToString();
                        supp_pob.Text = dt.Rows[0]["pob"].ToString();
                        supp_homeaddress.Text = dt.Rows[0]["homeaddress"].ToString();
                        supp_phonenumber.Text = dt.Rows[0]["phonenumber"].ToString();
                        supp_dob.Text = Convert.ToDateTime(dt.Rows[0]["dob"]).ToString("MM/dd/yyyy");
                        supp_gender.SelectedValue = dt.Rows[0]["gender"].ToString();
                        supp_mother_name.Text = dt.Rows[0]["mother_name"].ToString();
                    }
                    else
                    {
                        supp_cust_name.Text = "";
                        supp_ktp.Text = "";
                        supp_npwp.Text = "";

                        supp_pob.Text = "";
                        supp_homeaddress.Text = "";
                        supp_phonenumber.Text = "";
                        supp_dob.Text = "";
                        supp_mother_name.Text = "";
                    }
                }
            }
            catch (Exception ex)
            {
                string errmsg = "";
                if (ex.Message.IndexOf("Last Query:") > 0)
                    errmsg = ex.Message.Substring(0, ex.Message.IndexOf("Last Query:"));
                else
                    errmsg = ex.Message;
                mainPanel.JSProperties["cp_alert"] = errmsg;
            }

            BindGridUploadFoto();
            gridbindnotes();
            gridbind_suppl();
        }


        private string validateSubmitAndSaveApp()
        {
            string message = "";

            if (branchid.SelectedIndex == 0)
            {
                message += "Cabang Harus Diisi" + Environment.NewLine;
            }

            if (purpose.SelectedIndex == 0)
            {
                message += "Tujuan SLIK Harus Diisi" + Environment.NewLine;
            }

            if (productid.SelectedIndex == 0)
            {
                message += "Product Harus Diisi" + Environment.NewLine;
            }

            if (cust_name.Text == "")
            {
                message += labelCustomerName.Text + " Harus Diisi" + Environment.NewLine;
            }

            if (cust_type.SelectedValue == "IND" && ktp.Text == "")
            {
                message += "KTP No. Harus Diisi" + Environment.NewLine;
            }
            if (pob.Text == "")
            {
                message += labelTempatLahir.Text + " Harus Diisi" + Environment.NewLine;
            }
            if (dob.Text == "")
            {
                message += labelTanggalLahir.Text + " Harus Diisi" + Environment.NewLine;
            }
            if (cust_type.SelectedValue == "IND" && gender.SelectedIndex == -1)
            {
                message += "Gender Harus Diisi" + Environment.NewLine;
            }
            if (cust_type.SelectedValue == "PSH" && npwp.Text == "")
            {
                message += "NPWP Harus Diisi" + Environment.NewLine;
            }
            if (phonenumber.Text == "")
            {
                message += "Nomor Telepon Harus Diisi" + Environment.NewLine;
            }
            if (cust_type.SelectedValue == "PSH" && PICName.Text == "")
            {
                message += "Nama PIC Harus Diisi" + Environment.NewLine;
            }
            if (cust_type.SelectedValue == "PSH" && AktaPendirian.Text == "")
            {
                message += "Akta Pendirian Harus Diisi" + Environment.NewLine;
            }

            if (cust_type.SelectedValue == "PSH" && JenisBadanUsaha.SelectedIndex == 0)
            {
                message += "Jenis Badan Usaha Harus Diisi" + Environment.NewLine;
            }




            #region Loan Info

            if (purpose.SelectedValue == "1")
            {
                if (DealerCode.Text == "")
                {
                    message += "Dealer Harus Diisi" + Environment.NewLine;
                }
                if (SalesPerson.SelectedIndex == 0)
                {
                    message += "Sales Harus Diisi" + Environment.NewLine;
                }
                if (h_Model.Value == "")
                {
                    message += "Model Harus Diisi" + Environment.NewLine;
                }
                if (h_Varian.Value == "")
                {
                    message += "Varian Harus Diisi" + Environment.NewLine;
                }
                if (VehicleYear.SelectedIndex == 0)
                {
                    message += "vehicle Year Harus Diisi" + Environment.NewLine;
                }
                if (NoOfUnit.SelectedIndex == 0)
                {
                    message += "No of Unit Harus Diisi" + Environment.NewLine;
                }
                if (OTR.Text == "")
                {
                    message += "OTR Harus Diisi" + Environment.NewLine;
                }
                if (DP.Text == "")
                {
                    message += "DP Harus Diisi" + Environment.NewLine;
                }
                if (h_LoanTerm.Value == "")
                {
                    message += "Loan Term Harus Diisi" + Environment.NewLine;
                }
                if (InterestRate.Text == "")
                {
                    message += "Interest Rate Harus Diisi" + Environment.NewLine;
                }
            }
            #endregion
            return message;
        }

        private bool validateUserAuthProduct()
        {
            DataTable dt = conn.GetDataTable("select 1 from mapping_user_to_product where userid = @1 and productid = @2",
          new object[] { USERID, productid.SelectedValue }, dbtimeout);
            if (dt.Rows != null && dt.Rows.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        protected void GridViewSuppl_CustomCallback(object sender, DevExpress.Web.ASPxGridViewCustomCallbackEventArgs e)
        {
            if (e.Parameters.StartsWith("d:"))
            {
                delete_suppl(e.Parameters.Substring(2));
                gridbind_suppl();
                BindGridUploadFoto();
            }
        }

        protected void GridViewSuppl_Load(object sender, EventArgs e)
        {
            gridbind_suppl();
            BindGridUploadFoto();
            if (Request.QueryString["readonly"] != null)
                ModuleSupport.DisableControls(this, allowViewState);
        }

        protected void PNL_FindExisting_Callback(object source, CallbackEventArgsBase e)
        {
            if (e.Parameter.StartsWith("n"))
            {
                find_name.Text = "";
                find_name.Focus();
                find_reqid.Text = "";
                string qnull = "select * from vw_apprequest_all where 1=0";
                DataTable dtnull = conn.GetDataTable(qnull, null, dbtimeout);
                dtnull.Rows.Add(dtnull.NewRow());
                GridFind.DataSource = dtnull;
                GridFind.DataBind();
                lblnotfound.Visible = false;
                GridFind.Columns[5].Visible = false;
                GridFind.Columns[6].Visible = false;
            }

            if (e.Parameter.StartsWith("n:")) searchsup.Value = "0";
            else if (e.Parameter.StartsWith("np:")) searchsup.Value = "1";
            else if (e.Parameter.StartsWith("f:"))
            {
                try
                {
                    string query = "select * from vw_apprequest_all where cust_name like '%" + find_name.Text + "%' and requestid like '%" + find_reqid.Text + "%'";
                    if (find_name.Text == "" && find_reqid.Text == "")
                    {
                        query = "select * from vw_apprequest_all where 1=0";
                    }
                    DataTable dt = conn.GetDataTable(query, null, dbtimeout);
                    if (dt.Rows.Count > 0)
                    {
                        GridFind.DataSource = dt;
                        GridFind.DataBind();
                        lblnotfound.Visible = false;
                    }
                    else
                    {
                        dt.Rows.Add(dt.NewRow());
                        GridFind.DataSource = dt;
                        GridFind.DataBind();
                        GridFind.Rows[0].Visible = false;
                        lblnotfound.Visible = true;
                        if (find_name.Text == "" && find_reqid.Text == "") { lblnotfound.Text = ""; }
                        else { lblnotfound.Text = "Data tidak ditemukan"; }
                    }
                    if (searchsup.Value == "1")
                    {
                        GridFind.Columns[5].Visible = false;
                        GridFind.Columns[6].Visible = true;
                    }
                    else
                    {
                        GridFind.Columns[5].Visible = true;
                        GridFind.Columns[6].Visible = false;
                    }
                }
                catch (Exception ex)
                {
                    string errmsg = "";
                    if (ex.Message.IndexOf("Last Query:") > 0)
                        errmsg = ex.Message.Substring(0, ex.Message.IndexOf("Last Query:"));
                    else
                        errmsg = ex.Message;
                    PNL_FindExisting.JSProperties["cp_alert"] = errmsg;
                }
            }
        }

        #endregion callback

        protected void gridSuppPanel_Callback(object sender, CallbackEventArgsBase e)
        {
            if (e.Parameter.StartsWith("r:"))
            {
                retrieve_data_suppl(e.Parameter.Substring(2));
            }
            else if (e.Parameter.StartsWith("s:"))
            {
                savedata_suppl();
            }
            else if (e.Parameter.StartsWith("d:"))
            {
                delete_suppl(e.Parameter.Substring(2));
            }
            else if (e.Parameter.StartsWith("gp:"))
            {
                string key = e.Parameter.Substring(3);
                DataTable dt = conn.GetDataTable("select * from apprequestsupp where requestid = @1 and seq= @2", new object[] { requestid.Text, key }, dbtimeout);
                if (dt != null & dt.Rows.Count > 0)
                {
                    supp_ktp.Visible = false;
                    //supp_cust_name.Text = dt.Rows[0]["cust_name"].ToString();
                    //supp_ktp.Text = dt.Rows[0]["ktp"].ToString();
                    //supp_npwp.Text = dt.Rows[0]["npwp"].ToString();
                    //supp_cust_type.SelectedValue = dt.Rows[0]["cust_type"].ToString();
                    //supp_pob.Text = dt.Rows[0]["pob"].ToString();
                    //supp_homeaddress.Text = dt.Rows[0]["homeaddress"].ToString();
                    //supp_phonenumber.Text = dt.Rows[0]["phonenumber"].ToString();
                    //supp_dob.Text = dt.Rows[0]["dob"].ToString();
                    //supp_gender.SelectedValue = dt.Rows[0]["gender"].ToString();
                    //supp_mother_name.Text = dt.Rows[0]["mother_name"].ToString();
                }
            }

            gridbind_suppl();
            BindGridUploadFoto();
            gridbindnotes();
        }

        protected void panelDealer_Callback(object sender, CallbackEventArgsBase e)
        {

            string queryDealer = "Select DealerCode, DealerName from dbo.RfDealer where Active = 1";
            if (productid.SelectedItem.Text.ToLower().Contains("used pv"))
            {
                queryDealer += " and DealerName like '%used car%'";
            }
            staticFramework.reff(DealerCode, queryDealer, null, conn);

        }

        protected void panelModel_Callback(object sender, CallbackEventArgsBase e)
        {

            object[] par = new object[] { h_Brand.Value };
            staticFramework.reff(Model, "select ModelId as DATA_CODE, ModelName AS DATA_DESC from dbo.RfModel m where m.BrandId = @1 and Active = 1", par, conn);
        }

        private void loadTenor()
        {
            string query = "exec dbo.UspGetMaxTenor @1, @2, @3";
            int maxTenor = 0;
            object[] par = new object[] { productid.Text, h_Brand.Value, h_VehicleYear.Value };
            conn.ExecReader(query, par, 600);
            if (conn.hasRow())
            {
                maxTenor = Convert.ToInt32(conn.GetFieldValue(0));
            }
            query = "select Tenor, cast(Tenor as varchar(20)) TenorText from dbo.RfTenor where Tenor <= @1 and Active = 1";

            staticFramework.reff(LoanTerm, query, new object[] { maxTenor }, conn);

        }

        protected void panelVarian_Callback(object sender, CallbackEventArgsBase e)
        {
            staticFramework.reff(Varian, "select VarianId, VarianName from dbo.RfVarian where ModelId = @1 and Active = 1", new object[] { h_Model.Value }, conn);

        }

        protected void panelLoanTerm_Callback(object sender, CallbackEventArgsBase e)
        {
            loadTenor();
        }

        protected void panelClassification_Callback(object sender, CallbackEventArgsBase e)
        {
            setClassification();

        }

        void setClassification()
        {
            string query = "select ClassificationId from dbo.RfVarian where VarianId = @1 ";
            DataTable dt = conn.GetDataTable(query, new object[] { h_Varian.Value }, dbtimeout);
            try
            {
                Classification.SelectedValue = dt.Rows[0][0].ToString();
                Classification.DataBind();
            }
            catch (Exception)
            {

            }
        }
    }
}